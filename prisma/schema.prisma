// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum Role {
   USER
   ADMIN
}

enum TransactionType {
   TRANSFER
   WALLET_FUNDING
}

enum TransactionFlowType {
   INFLOW
   OUTFLOW
}

enum Currency {
   NGN
   USD
   GBP
   EUR
}

enum TransactionStatus {
   PENDING
   COMPLETED
   FAILED
}

enum TransactionApprovalStatus {
   PENDING
   APPROVED
   DECLINED
}

enum PaymentGateway {
   PAYSTACK
   FLUTTERWAVE
}

enum PaymentMethod {
   CARD
   BANK
}

model User {
   id             String    @id @default(cuid())
   createdAt      DateTime  @default(now())
   updatedAt      DateTime? @updatedAt
   firstName      String    @map("first_name")
   lastName       String?   @map("last_name")
   email          String    @unique()
   phone          String    @unique()
   password       String
   transactionPin String?

   isActive        Boolean @default(true)
   isFlagged       Boolean @default(false)
   isTrashed       Boolean @default(false)
   isEmailVerified Boolean @default(false)
   isPhoneVerified Boolean @default(false)

   wallets Wallet[]

   role Role @default(USER)

   transactions Transaction[]

   @@map("users")
}

model Wallet {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId   String
   balance  Float    @default(0.0)
   currency Currency @unique

   transactions Transaction[]

   @@map("wallets")
}

model Transaction {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId    String
   reference String
   amount    Float          @default(0.0)
   currency  Currency
   meta      Json?
   gateway   PaymentGateway @default(PAYSTACK)

   type        TransactionType
   description String               @default("Transaction")
   flow        TransactionFlowType?
   status      TransactionStatus    @default(PENDING)

   wallet   Wallet? @relation(fields: [walletId], references: [id])
   walletId String?

   pendingSourceTransactionApproval PendingTransactionApproval? @relation("source")
   pendingDestTransactionApproval   PendingTransactionApproval? @relation("dest")

   @@map("transactions")
}

model PendingTransactionApproval {
   id        String   @id @default(cuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   sourceTransaction   Transaction @relation("source", fields: [sourceTransactionId], references: [id], onDelete: Cascade)
   sourceTransactionId String      @unique

   destTransaction   Transaction @relation("dest", fields: [destTransactionId], references: [id], onDelete: Cascade)
   destTransactionId String      @unique

   status TransactionApprovalStatus @default(PENDING)

   amount Float @default(0.0)

   @@map("pendingTransactionApprovals")
}
